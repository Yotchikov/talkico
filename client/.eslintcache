[{"/Users/a18557590/Desktop/talkico/client/src/index.js":"1","/Users/a18557590/Desktop/talkico/client/src/reportWebVitals.js":"2","/Users/a18557590/Desktop/talkico/client/src/App.js":"3","/Users/a18557590/Desktop/talkico/client/src/routes.js":"4","/Users/a18557590/Desktop/talkico/client/src/pages/Auth.js":"5","/Users/a18557590/Desktop/talkico/client/src/pages/Room.js":"6","/Users/a18557590/Desktop/talkico/client/src/pages/CreateRoom.js":"7","/Users/a18557590/Desktop/talkico/client/src/hooks/auth.hook.js":"8","/Users/a18557590/Desktop/talkico/client/src/context/AuthContext.js":"9","/Users/a18557590/Desktop/talkico/client/src/hooks/http.hook.js":"10"},{"size":500,"mtime":1610885131710,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1610885131710,"results":"13","hashOfConfig":"12"},{"size":538,"mtime":1611679998379,"results":"14","hashOfConfig":"12"},{"size":642,"mtime":1611611490656,"results":"15","hashOfConfig":"12"},{"size":1377,"mtime":1611680662186,"results":"16","hashOfConfig":"12"},{"size":2618,"mtime":1611086919247,"results":"17","hashOfConfig":"12"},{"size":255,"mtime":1611078097538,"results":"18","hashOfConfig":"12"},{"size":742,"mtime":1611610758222,"results":"19","hashOfConfig":"12"},{"size":195,"mtime":1611671501055,"results":"20","hashOfConfig":"12"},{"size":902,"mtime":1611680617218,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"142v4np",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/a18557590/Desktop/talkico/client/src/index.js",[],["46","47"],"/Users/a18557590/Desktop/talkico/client/src/reportWebVitals.js",[],"/Users/a18557590/Desktop/talkico/client/src/App.js",[],"/Users/a18557590/Desktop/talkico/client/src/routes.js",[],"/Users/a18557590/Desktop/talkico/client/src/pages/Auth.js",["48","49","50"],"import React, { useState } from 'react';\nimport { useHttp } from '../hooks/http.hook';\n\nexport const Auth = () => {\n  const [form, setForm] = useState({ email: '', password: '' });\n  const { loading, error, request } = useHttp();\n\n  const handleInput = (e) => {\n    setForm({ ...form, email: e.target.email, password: e.target.password });\n  };\n\n  const handleLogin = async () => {};\n\n  const handleRegister = async () => {\n    try {\n      const data = await request('/api/auth/register', 'POST', {...form});\n      alert('Пользователь зарегистрирован!')\n    }\n    catch (e) {\n      alert('Что-то пошло не так!')\n    }\n  };\n\n  return (\n    <div>\n      <h1>Auth Page</h1>\n      <form>\n        <label for=\"email\">Email</label>\n        <input\n          type=\"text\"\n          placeholder=\"email\"\n          name=\"email\"\n          onChange={handleInput}\n          required\n        />\n\n        <label for=\"password\">Password</label>\n        <input\n          type=\"password\"\n          placeholder=\"password\"\n          name=\"password\"\n          onChange={handleInput}\n          required\n        />\n\n        <button type=\"submit\" onClick={handleLogin}>\n          Войти\n        </button>\n        <button type=\"submit\" onClick={handleRegister}>\n          Зарегистрироваться\n        </button>\n      </form>\n    </div>\n  );\n};\n","/Users/a18557590/Desktop/talkico/client/src/pages/Room.js",["51","52","53"],"import { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport { v4 as uuid } from 'uuid';\nimport Peer from 'peerjs';\n\nconst Video = (props) => {\n  const ref = useRef();\n  useEffect(() => {\n    props.peer.on('stream', (stream) => {\n      ref.current.srcObject = stream;\n    });\n  }, []);\n};\n\nexport const Room = (props) => {\n  const roomId = props.match.params.roomId;\n  const myId = uuid();\n  const socketRef = useRef();\n  const myVideoRef = useRef();\n  const [peers, setPeers] = useState([]);\n\n  useEffect(() => {\n    socketRef.current = io.connect('/');\n    navigator.mediaDevices\n      .getUserMedia({ video: true, audio: true })\n      .then((myStream) => {\n        myVideoRef.current.srcObject = myStream;\n        socketRef.current.emit('join-room', roomId, myId);\n\n        // Подклюячается новый пользователь\n        socketRef.current.on('user-connected', (userId) => {\n          // Создаем новый peer\n          const peer = new Peer(undefined, { host: '/', port: '3001' });\n          peer.on('open', (peerId) => {\n            // Посылаем свой peerId пользователю userId\n            socketRef.current.emit('send-signal', peerId, userId);\n            // При поступлении звонка от пользователя userId отправляем свой медиапоток\n            peer.on('call', (call) => {\n              call.answer(myStream);\n              setPeers((peers) => [...peers, call]);\n            });\n          });\n        });\n\n        // Мы подключились и получили peerId от отправителя\n        socketRef.current.on('return-signal', (senderId, receiverId) => {\n          // Если пытаются связаться с нами\n          if (receiverId == myId) {\n            // Создаем новый peer\n            const peer = new Peer(undefined, { host: '/', port: '3001' });\n            peer.on('open', () => {\n              // Звоним пользователю senderId\n              const call = peer.call(senderId, myStream);\n              setPeers((peers) => [...peers, call]);\n            });\n          }\n        });\n\n        // Пользователь отключился\n        socketRef.current.on('user-disconnected', (userId) => {\n          // TODO\n        });\n      });\n  }, []);\n\n  return (\n    <div>\n      <h6>You are in romm {roomId}</h6>\n      <video muted playsInLine autoPlay ref={myVideoRef} />\n      {peers.map((peer, index) => {\n        return <Video key={index} peer={peer} />;\n      })}\n    </div>\n  );\n};\n","/Users/a18557590/Desktop/talkico/client/src/pages/CreateRoom.js",[],"/Users/a18557590/Desktop/talkico/client/src/hooks/auth.hook.js",["54"],"import { useCallback, useState, useEffect } from 'react';\n\nconst storageName = 'userData';\n\nexport const useAuth = () => {\n  const [token, setToken] = useState(null);\n  const [userId, setUserId] = useState(null);\n\n  const login = useCallback((jwtToken, id) => {\n    setToken(jwtToken);\n    setUserId(id);\n    localStorage.setItem(storageName, JSON.stringify({ userId, token }));\n  }, []);\n\n  const logout = useCallback(() => {\n    setToken(null);\n    setUserId(null);\n    localStorage.removeItem(storageName);\n  }, []);\n\n  useEffect(() => {\n    const data = JSON.parse(localStorage.getItem(storageName));\n\n    if (data && data.token) {\n      login(data.token, data.userId);\n    }\n  }, [login]);\n\n  return { login, logout, token, userId };\n};\n","/Users/a18557590/Desktop/talkico/client/src/context/AuthContext.js",[],"/Users/a18557590/Desktop/talkico/client/src/hooks/http.hook.js",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":6,"column":11,"nodeType":"61","messageId":"62","endLine":6,"endColumn":18},{"ruleId":"59","severity":1,"message":"63","line":6,"column":20,"nodeType":"61","messageId":"62","endLine":6,"endColumn":25},{"ruleId":"59","severity":1,"message":"64","line":16,"column":13,"nodeType":"61","messageId":"62","endLine":16,"endColumn":17},{"ruleId":"65","severity":1,"message":"66","line":12,"column":6,"nodeType":"67","endLine":12,"endColumn":8,"suggestions":"68"},{"ruleId":"69","severity":1,"message":"70","line":48,"column":26,"nodeType":"71","messageId":"72","endLine":48,"endColumn":28},{"ruleId":"65","severity":1,"message":"73","line":64,"column":6,"nodeType":"67","endLine":64,"endColumn":8,"suggestions":"74"},{"ruleId":"65","severity":1,"message":"75","line":13,"column":6,"nodeType":"67","endLine":13,"endColumn":8,"suggestions":"76"},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'data' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.peer'. Either include it or remove the dependency array.","ArrayExpression",["79"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'myId' and 'roomId'. Either include them or remove the dependency array.",["80"],"React Hook useCallback has missing dependencies: 'token' and 'userId'. Either include them or remove the dependency array.",["81"],"no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},"Update the dependencies array to be: [props.peer]",{"range":"88","text":"89"},"Update the dependencies array to be: [myId, roomId]",{"range":"90","text":"91"},"Update the dependencies array to be: [token, userId]",{"range":"92","text":"93"},[315,317],"[props.peer]",[2138,2140],"[myId, roomId]",[384,386],"[token, userId]"]